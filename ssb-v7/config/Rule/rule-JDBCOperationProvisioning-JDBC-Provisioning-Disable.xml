<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="JDBC-Provisioning-Disable" type="JDBCOperationProvisioning">
  <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
  <Signature returnType="ProvisioningResult">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>The application whose data file is being processed.</Description>
      </Argument>
      <Argument name="schema">
        <Description>The Schema currently in use.</Description>
      </Argument>
      <Argument name="connection">
        <Description>A connection object to connect to database.</Description>
      </Argument>
      <Argument name="plan">
        <Description>The ProvisioningPlan created against the JDBC application.</Description>
      </Argument>
      <Argument name="request">
        <Description>The ProvisioningRequest created against the JDBC application.</Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="result">
        <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.List;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningResult;

       ProvisioningResult result=new ProvisioningResult();
        List accountRequest=plan.getAccountRequests();
        log.error(plan.toXml());
        for(ProvisioningPlan.AccountRequest acct:accountRequest)
        {
            if(AccountRequest.Operation.Disable.equals(acct.getOperation()))
            {
                log.error(acct.getOperation());
                PreparedStatement statement=connection.prepareStatement("update ohrm_user set status='0' where id=?");
                statement.setString(1, acct.getNativeIdentity());
                statement.executeUpdate();
                result.setStatus(ProvisioningResult.STATUS_COMMITTED);
            }
            else
                result.setStatus(ProvisioningResult.STATUS_FAILED);
        }
        return result;</Source>
</Rule>